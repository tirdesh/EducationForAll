/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.ProfessorRole.CourseWork;

import ui.*;
import Business.Business;
import Business.CourseWork.Course;
import Business.Profiles.ProfessorProfile;
import Business.Profiles.StudentProfile;
import UserInterface.WorkAreas.ProfessorRole.ProfessorWorkAreaJPanel;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tirdesh
 */
public class GradeCourseJPanel extends javax.swing.JPanel {

    Business business;
    JPanel CardSequencePanel;
    ProfessorProfile professor;
    DefaultTableModel originalTableModel;
    Vector<Object> originalColumnIdentifiers;

    /**
     * Creates new form AddCourseJPanel
     */
    public GradeCourseJPanel(Business bz, ProfessorProfile p, JPanel jp) {
        this.business = bz;
        CardSequencePanel = jp;
        professor = p;
        initComponents();
        //modifyComponents();
        populateCourseComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxSelectCourse = new javax.swing.JComboBox<>();
        btnBack = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextFieldSearch = new javax.swing.JTextField();
        jLabelSearch = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Grade Course");

        jLabel10.setText("Select Course:");

        jComboBoxSelectCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSelectCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectCourseActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Student ID", "Student Name", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextFieldSearch.setToolTipText("Search");
        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyTyped(evt);
            }
        });

        jLabelSearch.setText("Search:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxSelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabelSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxSelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)
                        .addGap(22, 22, 22)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogOut)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(581, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSelectCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectCourseActionPerformed
        // TODO add your handling code here:
        String selectedCourseName = (String) jComboBoxSelectCourse.getSelectedItem();

        if (selectedCourseName != null && !"Select a Course".equals(selectedCourseName)) {
            jLabelSearch.setVisible(true);
            jTextFieldSearch.setVisible(true);
            jScrollPane1.setVisible(true);
            jTable1.setVisible(true);
            Course selectedCourse = professor.findCourse(selectedCourseName);
            List<StudentProfile> students = selectedCourse.getRegisteredStudents();

            // Populate the JTable with student information
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            for (StudentProfile student : students) {
                model.addRow(new Object[]{
                    student.getPerson().getPersonId(),
                    student.getPerson().getFirst_name() + " " + student.getPerson().getFirst_name(),
                    student.getCourseProgress(selectedCourse) // Show existing grade
                });
            }
            DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
            originalTableModel = new DefaultTableModel(new Vector<>(m.getDataVector()), new Vector<>(m.getDataVector().get(0))); // Use the first row as column identifiers
            originalColumnIdentifiers = new Vector<>(originalTableModel.getDataVector().get(0));
        } else {
            jLabelSearch.setVisible(false);
            jTextFieldSearch.setVisible(false);
            jScrollPane1.setVisible(false);
            jTable1.setVisible(false);
        }
    }//GEN-LAST:event_jComboBoxSelectCourseActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        ProfessorWorkAreaJPanel professorWorkAreaJPanel = new ProfessorWorkAreaJPanel(business, professor, CardSequencePanel);
        CardSequencePanel.removeAll();
        CardSequencePanel.add("professor", professorWorkAreaJPanel);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        LoginJPanel panel = new LoginJPanel(business, CardSequencePanel);
        CardSequencePanel.removeAll();
        CardSequencePanel.add("LoginJPanel", panel);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        int gradeColumn = 2; // Adjust the column index for the grade

        if (jTable1.columnAtPoint(evt.getPoint()) == gradeColumn) {
            String currentGrade = jTable1.getValueAt(selectedRow, gradeColumn).toString();
            String newGrade = JOptionPane.showInputDialog("Enter the new grade:", currentGrade);

            if (newGrade != null) {
                jTable1.setValueAt(newGrade, selectedRow, gradeColumn);

                // Update courseProgress for the corresponding Course and StudentProfile
                String selectedCourseName = (String) jComboBoxSelectCourse.getSelectedItem();
                if (selectedCourseName != null && !"Select a Course".equals(selectedCourseName)) {
                    Course selectedCourse = professor.findCourse(selectedCourseName);
                    StudentProfile student = getStudentProfileFromRow(selectedRow);

                    if (selectedCourse != null && student != null) {
                        int newProgress = Integer.parseInt(newGrade); // You may need to parse the new grade
                        student.updateCourseProgress(selectedCourse, newProgress);
                    }
                }

            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTextFieldSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyTyped
        if (evt.getKeyChar() == '\n') { // Check if Enter key is pressed
            String searchText = jTextFieldSearch.getText().trim().toLowerCase();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);  // Clear the current table data

            for (int i = 0; i < originalTableModel.getRowCount(); i++) {
                String studentID = originalTableModel.getValueAt(i, 0).toString().toLowerCase();
                String studentName = originalTableModel.getValueAt(i, 1).toString().toLowerCase();

                // Check if the entered text matches either student ID or student name
                if (studentID.contains(searchText) || studentName.contains(searchText)) {
                    model.addRow(originalTableModel.getDataVector().elementAt(i));
                }
            }
        }
    }//GEN-LAST:event_jTextFieldSearchKeyTyped

    private StudentProfile getStudentProfileFromRow(int row) {
        String selectedCourseName = (String) jComboBoxSelectCourse.getSelectedItem();
        if (selectedCourseName != null && !"Select a Course".equals(selectedCourseName)) {
            Course selectedCourse = professor.findCourse(selectedCourseName);

            if (selectedCourse != null) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                int studentIDColumn = 0; // Adjust this column index based on your table
                String studentIDValue = model.getValueAt(row, studentIDColumn).toString();
                // Now, iterate through the registered students of the selected course
                for (StudentProfile student : selectedCourse.getRegisteredStudents()) {
                    if (Integer.parseInt(studentIDValue) == student.getPerson().getPersonId()) {
                        return student;
                    }
                }
            }
        }
        return null;
    }

    public void populateCourseComboBox() {
        // Clear the existing items in the JComboBox
        jComboBoxSelectCourse.removeAllItems();  // Clear existing items
        jComboBoxSelectCourse.addItem("Select a Course");

        // Get the list of courses from the CourseCatalog
        ArrayList<Course> courses = professor.getCourseList();
        for (Course course : courses) {
            jComboBoxSelectCourse.addItem(course.getCourseName());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JComboBox<String> jComboBoxSelectCourse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

}
